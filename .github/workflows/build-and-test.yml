name: Build and Test IP Template

# This workflow provides a comprehensive build and test pipeline for Vyges IP projects
# This template workflow is disabled by default and requires manual triggering
# Focus is on simulation, synthesis, and verification with open-source tools

# Configuration variables - modify these to change versions
# These are used throughout the workflow for version consistency

on:
  # Manual trigger only - no automatic triggers for template repository
  workflow_dispatch:
    inputs:
      design_type:
        description: 'Design type and tool requirements'
        required: false
        default: 'tapeout'
        type: choice
        options:
          - digital       # Digital only (Verilator, Yosys, FPGA tools)
          - analog        # Analog only (Xschem, Magic, ngspice)
          - mixed         # Mixed-signal (Digital + Analog tools)
          - chiplets      # Chiplet integration (Advanced packaging)
          - tapeout       # Full tapeout flow (Efabless-style)
      test_simulation:
        description: 'Run simulation tests'
        required: false
        default: true
        type: boolean
      test_synthesis:
        description: 'Run synthesis tests'
        required: false
        default: true
        type: boolean
      test_linting:
        description: 'Run linting checks'
        required: false
        default: true
        type: boolean
      test_validation:
        description: 'Run validation checks'
        required: false
        default: true
        type: boolean

# Disable automatic runs - this workflow only runs on manual trigger
# and when explicitly enabled by repository maintainers

jobs:
  # Main build and test job - everything runs sequentially on one runner
  build-and-test:
    runs-on: ubuntu-24.04
    env:
      # Configuration variables - modify these to change versions
      
      # Infrastructure
      UBUNTU_VERSION: "24.04"          # Ubuntu runner version (e.g., "24.04", "22.04")
      
      # Python Environment
      PYTHON_VERSION: "3.12"           # Python version (e.g., "3.10", "3.11", "3.12")
      PYTHON_VERSION_SHORT: "3.12"     # Python version for commands (e.g., "3.10", "3.11", "3.12")
      
      # Simulation Tools
      VERILATOR_VERSION: "5.038"       # Verilator version (e.g., "5.038", "5.039")
      ICARUS_VERSION: "14.0"           # Icarus Verilog version (e.g., "14.0", "13.0")
      GHDL_VERSION: "latest"           # GHDL version (e.g., "latest", "4.0")
      GTKWAVE_VERSION: "latest"        # GTKWave version (e.g., "latest", "3.3")
      SURFER_VERSION: "latest"         # Surfer web-based VCD viewer (e.g., "latest", "1.0")
      PANDOC_VERSION: "latest"         # Pandoc markdown converter (e.g., "latest", "3.0")
      
      # Synthesis Tools
      YOSYS_VERSION: "latest"          # Yosys version (e.g., "latest", "0.34")
      ABC_VERSION: "latest"            # Berkeley ABC version (e.g., "latest", "1.01")
      
      # Layout & Verification Tools
      MAGIC_VERSION: "latest"          # Magic version (e.g., "latest", "8.3")
      NETGEN_VERSION: "latest"         # Netgen version (e.g., "latest", "1.5")
      KLAYOUT_VERSION: "latest"        # KLayout version (e.g., "latest", "0.28")
      
      # FPGA Tools
      NEXTPNR_VERSION: "latest"        # NextPNR version (e.g., "latest", "0.6")
      SYMBIFLOW_VERSION: "latest"      # SymbiFlow version (e.g., "latest", "2023.12")
      VPR_VERSION: "latest"            # VPR version (e.g., "latest", "8.0")
      OPENFPGA_VERSION: "latest"       # OpenFPGA version (e.g., "latest", "1.0")
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup workflow for testing
        run: |
          echo "🔧 Setting up workflow for testing..."
          echo "Design Type: ${{ github.event.inputs.design_type || 'tapeout' }}"
          echo "✅ Workflow enabled by default for testing"
          echo "This will install all tools to verify the build process"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install core system packages
        run: |
          # Update package list
          sudo apt-get update
          
          # Install core packages (always needed)
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            tree \
            unzip \
            make \
            python3 \
            python3-pip \
            python3-venv \
            bison \
            flex \
            help2man \
            libfl-dev \
            libfl2 \
            libgit2-dev \
            libgoogle-perftools-dev \
            libz-dev \
            perl \
            ruby \
            ruby-dev \
            time \
            zlib1g \
            zlib1g-dev \
            gettext \
            gnat

      - name: Install digital tools (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing digital design tools..."
          
          # Install digital simulation and synthesis tools
          sudo apt-get install -y --no-install-recommends \
            libqt5multimediawidgets5 \
            libqt5opengl5 \
            libqt5svg5-dev \
            libqt5xmlpatterns5-dev \
            qtmultimedia5-dev \
            qttools5-dev

      - name: Install analog tools (analog, mixed, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'analog') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing analog design tools..."
          
          # Install analog design tools
          sudo apt-get install -y --no-install-recommends \
            magic \
            netgen \
            xschem \
            ngspice

      - name: Install KLayout (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing KLayout for layout viewing..."
          sudo apt-get install -y klayout
          klayout -v

      - name: Install Yosys (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing Yosys for digital synthesis..."
          
          # Install Yosys from Ubuntu repositories
          sudo apt-get install -y yosys
          
          # Verify installation
          yosys -V
          
          # Check if slang module is available
          if yosys -m slang -p "slang_version" 2>/dev/null; then
            echo "✅ Yosys with slang support installed"
          else
            echo "⚠️  Yosys installed but slang module not available"
          fi
          
          # Get Yosys version
          YOSYS_VERSION=$(yosys -V | grep -oP 'Yosys \K[0-9]+\.[0-9]+' || echo "unknown")
          echo "Installed Yosys version: $YOSYS_VERSION"
          
          # Note: Ubuntu 24.04 Yosys version may be older than 0.39
          # This is acceptable for template testing
          echo "✅ Yosys installation completed"

      - name: Install Verilator (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing Verilator for digital simulation..."
          # Clone Verilator repository
          git clone https://github.com/verilator/verilator.git
          cd verilator
          
          # Checkout specific version 5.026
          git checkout v5.026
          
          # Build and install
          autoconf
          ./configure
          make -j$(nproc)
          sudo make install
          
          # Verify installation
          verilator --version

      - name: Install OpenROAD tools (chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing OpenROAD tools for advanced ASIC flows..."
          
          # Clone OpenROAD-flow-scripts repository
          git clone https://github.com/The-OpenROAD-Project/OpenROAD-flow-scripts.git
          cd OpenROAD-flow-scripts
          
          # Build OpenROAD tools (this includes TritonFPlan, RePlAce, TritonCTS, FastRoute, TritonRoute)
          ./build_openroad.sh
          
          # Add OpenROAD tools to PATH
          echo 'export PATH=$PATH:'$(pwd)'/tools/OpenROAD/build/src' >> $GITHUB_ENV
          echo 'export PATH=$PATH:'$(pwd)'/tools/RePlAce/build/RePlAce' >> $GITHUB_ENV
          echo 'export PATH=$PATH:'$(pwd)'/tools/FastRoute/build/FastRoute' >> $GITHUB_ENV
          
          # Verify installations
          echo "✅ OpenROAD tools installed"
          echo "Note: These tools are now available for advanced ASIC design flows"

      - name: Install GHDL Yosys plugin (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing GHDL Yosys plugin for VHDL support..."
          
          # Install GHDL (VHDL simulator)
          sudo apt-get install -y ghdl
          
          # Clone GHDL Yosys plugin
          git clone https://github.com/ghdl/ghdl-yosys-plugin.git
          cd ghdl-yosys-plugin
          
          # Build the plugin
          make
          
          # Install the plugin
          sudo make install
          
          # Verify installation
          echo "✅ GHDL Yosys plugin installed"
          echo "Note: VHDL synthesis support is now available in Yosys"

      - name: Install Open PDKs (analog, mixed, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'analog') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing Open PDKs for analog design..."
          
          # Clone Open PDKs repository
          git clone https://github.com/RTimothyEdwards/open_pdks.git
          cd open_pdks
          
          # Install Open PDKs (includes sky130, gf180mcu, etc.)
          ./configure --enable-sky130-pdk --enable-gf180mcu-pdk
          make
          sudo make install
          
          # Set PDK_ROOT environment variable
          echo 'export PDK_ROOT=/usr/local/share/pdk' >> $GITHUB_ENV
          
          # Verify installation
          echo "✅ Open PDKs installed"
          echo "Available PDKs: sky130, gf180mcu"
          echo "PDK_ROOT set to: /usr/local/share/pdk"

      - name: Install Icarus Verilog (digital, mixed, chiplets, tapeout)
        if: contains('${{ github.event.inputs.design_type }}', 'digital') || contains('${{ github.event.inputs.design_type }}', 'mixed') || contains('${{ github.event.inputs.design_type }}', 'chiplets') || contains('${{ github.event.inputs.design_type }}', 'tapeout')
        run: |
          echo "🔧 Installing Icarus Verilog for digital simulation..."
          sudo apt-get install -y iverilog
          iverilog -V

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      - name: Setup Vyges CLI (if available)
        run: |
          # Check if Vyges CLI is available
          if command -v vyges &> /dev/null; then
            echo "Vyges CLI found"
            vyges --version
          else
            echo "Vyges CLI not found - skipping CLI-based tests"
          fi

      - name: Validate project structure
        if: ${{ github.event.inputs.test_validation == 'true' }}
        run: |
          echo "🔍 Validating project structure..."
          
          # Check for required directories
          required_dirs=("rtl" "tb" "docs" "test")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ Found $dir/"
            else
              echo "⚠️ Missing $dir/ (optional for template)"
            fi
          done
          
          # Check for required files
          required_files=("README.md" "LICENSE" "NOTICE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done
          
          # Check for metadata template
          if [ -f "vyges-metadata.template.json" ]; then
            echo "✅ Found vyges-metadata.template.json"
          else
            echo "⚠️ Missing vyges-metadata.template.json"
          fi
          
          echo "✅ Project structure validation complete"

      - name: Validate metadata (if Vyges CLI available)
        if: ${{ github.event.inputs.test_validation == 'true' }}
        run: |
          if command -v vyges &> /dev/null; then
            echo "🔍 Validating metadata with Vyges CLI..."
            vyges validate --dry-run || echo "⚠️ Metadata validation failed (expected for template)"
          else
            echo "⏭️ Skipping metadata validation (Vyges CLI not available)"
          fi

      - name: Run linting checks
        if: ${{ github.event.inputs.test_linting == 'true' }}
        run: |
          echo "🔍 Linting SystemVerilog files..."
          
          # Find all .sv files
          sv_files=$(find . -name "*.sv" -type f)
          
          if [ -z "$sv_files" ]; then
            echo "ℹ️ No SystemVerilog files found (expected for template)"
          else
            for file in $sv_files; do
              echo "Linting $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "⚠️ Lint issues in $file"
            done
          fi
          
          echo "✅ Linting complete"

      - name: Check file permissions
        if: ${{ github.event.inputs.test_linting == 'true' }}
        run: |
          echo "🔍 Checking file permissions..."
          
          # Check for executable scripts
          scripts=$(find . -name "*.sh" -type f)
          for script in $scripts; do
            if [ ! -x "$script" ]; then
              echo "⚠️ Script $script is not executable"
            fi
          done
          
          echo "✅ File permission check complete"

      - name: Run simulation tests
        if: ${{ github.event.inputs.test_simulation == 'true' }}
        run: |
          echo "🧪 Running simulation tests..."
          
          # Check for testbench files
          if [ -d "tb" ]; then
            echo "Found testbench directory"
            
            # Look for SystemVerilog testbenches
            sv_tb_files=$(find tb -name "tb_*.sv" -type f)
            if [ -n "$sv_tb_files" ]; then
              echo "Found SystemVerilog testbenches: $sv_tb_files"
              # Note: Actual test execution would require specific testbench setup
              echo "ℹ️ SystemVerilog testbench execution requires specific setup"
            fi
            
            # Look for cocotb testbenches
            cocotb_files=$(find tb -name "test_*.py" -type f)
            if [ -n "$cocotb_files" ]; then
              echo "Found cocotb testbenches: $cocotb_files"
              # Note: Actual test execution would require specific testbench setup
              echo "ℹ️ Cocotb testbench execution requires specific setup"
            fi
            
            if [ -z "$sv_tb_files" ] && [ -z "$cocotb_files" ]; then
              echo "ℹ️ No testbench files found (expected for template)"
            fi
          else
            echo "ℹ️ No testbench directory found (expected for template)"
          fi
          
          echo "✅ Simulation test check complete"

      - name: Check synthesis configuration
        if: ${{ github.event.inputs.test_synthesis == 'true' }}
        run: |
          echo "🔧 Checking synthesis configuration..."
          
          # Check ASIC configuration
          if [ -d "flow/openlane" ]; then
            echo "✅ Found OpenLane configuration for ASIC"
            if [ -f "flow/openlane/config.json" ]; then
              echo "✅ Found OpenLane config.json"
            fi
          else
            echo "ℹ️ No OpenLane configuration found (expected for template)"
          fi
          
          # Check FPGA configuration
          if [ -d "flow/vivado" ]; then
            echo "✅ Found Vivado configuration for FPGA"
          else
            echo "ℹ️ No Vivado configuration found (expected for template)"
          fi
          
          echo "✅ Synthesis configuration check complete"

      - name: Generate test report
        run: |
          echo "📊 Test Report"
          echo "=============="
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Design Type: ${{ github.event.inputs.design_type }}"
          echo ""
          echo "Tool Installation:"
          echo "- Core Tools: ✅ Always installed"
          if [[ "${{ github.event.inputs.design_type }}" =~ ^(digital|mixed|chiplets|tapeout)$ ]]; then
            echo "- Digital Tools: ✅ Installed (Verilator, Yosys, Icarus, GHDL)"
          else
            echo "- Digital Tools: ⏭️ Skipped"
          fi
          if [[ "${{ github.event.inputs.design_type }}" =~ ^(analog|mixed|tapeout)$ ]]; then
            echo "- Analog Tools: ✅ Installed (Magic, Xschem, ngspice, Open PDKs)"
          else
            echo "- Analog Tools: ⏭️ Skipped"
          fi
          if [[ "${{ github.event.inputs.design_type }}" =~ ^(chiplets|tapeout)$ ]]; then
            echo "- Advanced Tools: ✅ Installed (OpenROAD, TritonRoute)"
          else
            echo "- Advanced Tools: ⏭️ Skipped"
          fi
          echo ""
          echo "Test Results:"
          echo "- Validation: ${{ github.event.inputs.test_validation == 'true' && '✅ ENABLED' || '⏭️ DISABLED' }}"
          echo "- Linting: ${{ github.event.inputs.test_linting == 'true' && '✅ ENABLED' || '⏭️ DISABLED' }}"
          echo "- Simulation: ${{ github.event.inputs.test_simulation == 'true' && '✅ ENABLED' || '⏭️ DISABLED' }}"
          echo "- Synthesis: ${{ github.event.inputs.test_synthesis == 'true' && '✅ ENABLED' || '⏭️ DISABLED' }}"
          echo ""
          echo "Note: This is a template repository. Actual tests require IP-specific implementation."

      - name: Workflow status
        run: |
          echo "🎉 Template workflow completed successfully!"
          echo "This template repository is ready for IP development."
          echo ""
          echo "Next steps:"
          echo "1. Use 'Use this template' to create a new repository"
          echo "2. Clone your new repository"
          echo "3. Run 'vyges init --interactive' to set up your IP"
          echo "4. Add your RTL and testbenches"
          echo "5. Enable this workflow in your new repository" 

 