#!/usr/bin/env python3

# Copyright (c) 2025 Vyges, Inc.
# All rights reserved.
#
# Use is subject to LICENSE terms.
#
# Vyges Test Harness Report Generator
# Version: 1.0
# Date: 2025-01-17
#
# This script assumes the IP developer has:
# - A `vyges-metadata.json` or `template.yaml`
# - A `logs/` folder with simulation logs (stdout/stderr)
# - Optional code or functional coverage reports
# - A `test/` folder with testbenches and test scripts


import os
import json
import datetime
import glob
from pathlib import Path

# Simple template for the report
REPORT_TEMPLATE = """
# Test Harness Report

**IP Block**: {ip_name}  
**Design Version**: {version}  
**Generated On**: {timestamp}  
**Author**: {author}  
**Generated By**: Vyges Test Harness Report Generator v1.0

---

## 1. Environment

- Simulator: {simulator}
- OS/Platform: {platform}
- Tool Version: {tool_version}

---

## 2. Test Harness Structure

- Testbench: `{testbench}`
- Stimulus Type: {stimulus_type}
- Coverage: {coverage_type}

---

## 3. Test Summary

- Total Tests Run: {total_tests}
- Pass: {pass_count}
- Fail: {fail_count}
- Log Files: `{log_files}`

---

## 4. Coverage Summary

- Code Coverage: {code_coverage}
- Functional Coverage: {func_coverage}

---

## 5. Known Issues

{known_issues}

---

## 6. Additional Notes

{notes}

---

*This report was automatically generated by the Vyges Test Harness Report Generator v1.0.*  
*Copyright (c) 2025 Vyges, Inc. All rights reserved.*
"""

def scan_logs(log_dir):
    pass_count = 0
    fail_count = 0
    total = 0
    logs = []

    for log_file in glob.glob(f"{log_dir}/*.log"):
        logs.append(os.path.basename(log_file))
        with open(log_file, 'r', errors='ignore') as f:
            content = f.read().lower()
            if "error" in content or "fail" in content:
                fail_count += 1
            else:
                pass_count += 1
            total += 1
    return total, pass_count, fail_count, logs

def load_metadata(meta_file):
    if not Path(meta_file).exists():
        return {"ip_name": "Unknown IP", "version": "N/A", "author": "N/A"}
    with open(meta_file, 'r') as f:
        return json.load(f)

def generate_report(output_file="test_harness_report.md"):
    metadata = load_metadata("vyges-metadata.json")
    ip_name = metadata.get("name", "Unknown IP")
    version = metadata.get("version", "N/A")
    author = metadata.get("author", "N/A")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    total, passed, failed, logs = scan_logs("logs")

    report = REPORT_TEMPLATE.format(
        ip_name=ip_name,
        version=version,
        timestamp=timestamp,
        author=author,
        simulator="VCS / Xcelium / Questa (edit as needed)",
        platform=os.uname().sysname,
        tool_version="(add tool version)",
        testbench="test/top_tb.sv",
        stimulus_type="Directed / Random / Constrained-Random",
        coverage_type="Code / Functional / None",
        total_tests=total,
        pass_count=passed,
        fail_count=failed,
        log_files=", ".join(logs),
        code_coverage="(add summary or tool output)",
        func_coverage="(add functional coverage points if any)",
        known_issues="- None reported",
        notes="Auto-generated. Please review manually for completeness."
    )

    with open(output_file, 'w') as f:
        f.write(report)
    print(f"[✓] Vyges Test Harness Report written to: {output_file}")
    print(f"[✓] Generated by Vyges Test Harness Report Generator v1.0")

if __name__ == "__main__":
    generate_report()

